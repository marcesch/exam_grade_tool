# TODOs
Collection of ideas, "feature requests", TODOs in code, ..

categorization:
[1]: important functionality to be added
[2]: nice to have functionality, or doing things more properly / cleanly
[3]: allowing stuff to be distributed cross platform and be used by more than just one user / one system
[4]: nice-to-have-features if I want to build this thing BIG

## BACKEND
- [1] clean up code
    - [EXAM]:
        - No old code except the grade report pdf thingy
        - needs testing
        - NotImplementedErrors, open TODOs
    - [CATEGORY]:
        - No old code
        - NotImplementedErrors, open TODOs
    - [CLASSES]:
        - merge export_class_overview, create_grade_report
        - test that list of categories is a) complete (every category that occurs in some exam is in that list),
          and b) during computation of grade, that every category contains exams (computation of average is hard otherwise)
    - [OVERVIEW]
        - Some RaiseNotImplemented stuff
- [1] make sure to store everyhting to disk appropriately -- e.g. interrupt shutdown or so?
    -  use https://docs.python.org/3/library/atexit.html to deal with shutdowns
- [2] Distinguish between filesystem => use os.path.join() for filepaths, ...
- [2] permissions for files using `os.chmod(filename, 0o444), probably 0x664 (root can edit)
    - RW for all exam data
    - R on student list -- don't want users to mess with that
- [1] pick files/folders using file dialog: https://stackoverflow.com/questions/9319317/quick-and-easy-file-dialog-in-python
- [3] proper logging everywhere
- [1] make sure implementation can deal with student not writing exams
- [3] make sure implementation can deal with student that has missed all exams of a category
- [2] Better string handling for student names -- store everything as .lower(), show as capitalize()
    - accept lower/upper case input
- [2] Use this to open pdf of generated exam report https://stackoverflow.com/questions/434597/open-document-with-default-os-application-in-python-both-in-windows-and-mac-os
- [3] support floats for points (e.g. 22.5)
    - python probably does that automatically?
- [3] when adding new class, use categories from most recent class as template
- [3] maybe add date as a field for exam
- [2] replace prints with logging, fix output of it
- [2] make sure that prints/logging follow the convention of "[WHO AM I] message"
- [2] [CATEGORY / EXAM] Deal with bonus grades (absolute bonus) -- done as exam / kept in category / ...
- [ ] Exam: when the user enters points, it always has precedence over manually set grade.
- [1] Exam: Don't truncate points achieved at max points, instead truncate grades over 6 (so teacher still sees that student was over max)
- [1] Class: The compute_average_grade method could be improved to better deal with e.g. student missing exams (thus, weight does not sum to 1), bonus grades, voluntary exams, ...
- [2] allow other max grades consistently, also outside exam environment

## FRONTEND / GUI

- [1] In window overview: use tabs for the 3 things: Tab1 = Exams, tab2 = Categories, tab3 = students (or stud, exam, cat; but make exams default active)
- [1] Find a pleasant way to let user know of errors (don't just throw prompts around)
- [] Find out how to do actions in PyQt
- [2] sanitize user inputs everywhere
- [2] add check that the user does not include too many categories (screws up loading / storing) -- cap at 15 or so
- [1] support floats for points (e.g. 22.5)
- [3] add tutorial action on overview => or make thing intuitive
- [3] allow pasting into gui-table from excel or so
- [4] Find way to do "recent DBs" in menu bar
- [1] make newest semester tab active during startup
- [2] Update semester in main/startup window
- [1] in exam: schnitt in treeview anzeigen
- [1] kategorienÃ¼bersicht rechts
- [2] in treeview selection, make selection more convenient (esc removes any selected item, pressing outside of the treeview too, only allow multiselect when pressing shift, ...)
- [3] dynamically adjust window size to avoid scrolling within treeviews
- [2] how to deal with weight of categories not being 1 -- e.g., average grade by student does not make sense in treeview than
- [2] Maybe exchange treeviews with tableviews
- [1] class WindowExamDetail: dynamically adjust GUI based on Exam type chosen (with subclasses of Exam)
- [2] add default values for a new class (default category "Voci-Exams", default exam "Voci 1", ...)
- [2] add checks on each backend-function call to catch any exception.
- [2] Add prompt that handles the import-from-excel (e.g. "do you want to first create a template" prompt or so)

## DISTRIBUTION
- [] Try pyinstaller on Mac with small code example
- [] Try to distribute the more realistic examples in every step
- [] Try pyinstaller on windows
- [] Write scripts to automate workflows on Mac / Windows / Linux
- [] Take care of relative imports (they can apparently screw up things)

## NEW FEATURES
- [1] make nice exam summaries
- [4] do the thing securely, like encrypting exam data, ...
- [4] Add functionality for restoring stuff from a .trash folder within program
    - remove trash functionality for now, it just litters the disk
- [2] support english => apparently, this is best done using some dictionary "text A" -> [case DE] "Hallo", [case EN] "Hello" -> google
- [3] add grading mode "curve fitting": instead of linear, say where the 4 is and where the 6 is
    - can also do that with arbitrary many grades; use linear interapolation for grades in between
    - use fancy interpolations because of reasons, alternatively
- [2] add pdf-report for semesternoten / grade report grades.
- [3] Undo / Redo feature (google and / or store last performed action)
- [3] [EXAM] also accept grading system that goes from high to low

## MISC
- [2] test the shit out of the bugger
- [3] start "documentation" of workflows and project layout -- e.g., after calling method XY, class gets stored on disk automatically. After addign student, has to be invoked manually. Etc.
- [1] Make sure to deanomymize testcases properly (remove real names of my class etc.)