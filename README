# README

## TODOs
See TODO file

### Stuff to ask selina
- layout for folders (ish imporant)
- layout for exam => grade reports within same file?
    - why not simply on second map? (arbeitsmappe?)
- spannende modi zum berechnen von noten / kategorien
- GUI stuff: more pleasant if overview window (showing classes, ..) stays open in background or not?


### GUI stuff
use
- https://github.com/RobertJN64/TKinterModernThemes/blob/master/TKinterModernThemes/examples/examplelauncher.py
- use Treeview with one level of hierarchy for List / Columns

or
- https://labdeck.com/python-designer/python-gui-designer/
for easier design
EDIT; only works for windows, use glade instead:
 1. create GUI and store as .glade (glorified .xml)
 2. use https://python-gtk-3-tutorial.readthedocs.io/en/latest/builder.html to create code
oor PyQt
- [overview] https://medium.com/@lelandzach/building-python-desktop-app-guis-in-2019-macos-windows-linux-19dc71485d60
- https://build-system.fman.io/qt-designer-download
- [tutorial] https://realpython.com/qt-designer-python/#building-main-windows-with-qt-designer-and-python

=> I've settled on PyQt for now

#### PyQT6
- Installation
https://www.pythonguis.com/installation/install-qt-designer-standalone/
    installation is complete, use qt designer to design, TRY ON MAC!

- General
https://www.pythonguis.com/tutorials/pyqt6-signals-slots-events/

- Treeviews
https://codereview.stackexchange.com/questions/263273/python-pyqt6-populate-qtreewidget-with-a-list-of-named-tuples

1. Use Qt designer to create a .ui file (basically a .xml with description of the GUI elements)
2. Compile a .py file generating the GUI with `pyuic6 -o main_window.py main_window.ui`
3. Connect signals, fill treeviews, ...

#### Treeview selection
```
import sys
from PyQt5.QtWidgets import QApplication, QTreeWidget, QTreeWidgetItem, QMainWindow
from PyQt5.QtCore import Qt

class CustomTreeWidget(QTreeWidget):
    def __init__(self):
        super().__init__()
        self.setSelectionMode(QTreeWidget.MultiSelection)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Shift or event.key() == Qt.Key_Control:
            # Allow multiple item selection when Shift or Ctrl is pressed
            event.accept()
        elif event.key() == Qt.Key_Escape:
            # Clear all selections when Esc is pressed
            self.clearSelection()
            event.accept()
        else:
            # Handle other key events normally
            super().keyPressEvent(event)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = QMainWindow()

    tree = CustomTreeWidget()
    tree.setHeaderLabels(['Item'])
    for i in range(10):
        item = QTreeWidgetItem(tree, ['Item {}'.format(i + 1)])

    window.setCentralWidget(tree)
    window.show()

    sys.exit(app.exec_())
```

### Make table sortable
```
from PyQt5.QtWidgets import QTableWidget, QTableWidgetItem, QHeaderView, QApplication
from PyQt5.QtCore import Qt

class SortableTable(QTableWidget):
    def __init__(self):
        super().__init__()

        # Set default sorting column and order
        self.sort_column = 0
        self.sort_order = Qt.AscendingOrder

        # Connect the header to the sorting function
        self.horizontalHeader().sectionClicked.connect(self.sort_table)

    def sort_table(self, logical_index):
        # Determine the sorting order
        if logical_index == self.sort_column:
            self.sort_order = Qt.DescendingOrder if self.sort_order == Qt.AscendingOrder else Qt.AscendingOrder
        else:
            self.sort_column = logical_index
            self.sort_order = Qt.AscendingOrder

        # Sort the table
        self.sortItems(self.sort_column, self.sort_order)

def main():
    app = QApplication([])

    table = SortableTable()
    table.setSortingEnabled(True)

    # Add columns and data to the table
    table.setColumnCount(4)
    table.setHorizontalHeaderLabels(['Lastname', 'Firstname', 'Points', 'Grades'])

    data = [
        ('Doe', 'John', 90.0, 3.5),
        ('Smith', 'Alice', 85.0, 3.2),
        ('Johnson', 'Bob', 92.5, 3.9),
        # Add more data here
    ]

    table.setRowCount(len(data))
    for row, (lastname, firstname, points, grades) in enumerate(data):
        table.setItem(row, 0, QTableWidgetItem(lastname))
        table.setItem(row, 1, QTableWidgetItem(firstname))
        table.setItem(row, 2, QTableWidgetItem(str(points)))
        table.setItem(row, 3, QTableWidgetItem(str(grades)))

    table.show()
```

### For handling Esc keypress over entire window
Replace the Q-Widget with new custom widgets that react on the signal (if event.key() == Qt.Key_Escape):

```
class CustomComboBox(QComboBox):
    def __init__(self, parent=None):
        super().__init__(parent)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.setCurrentIndex(-1)  # Deselect the current item
        else:
            super().keyPressEvent(event)

class CustomLineEdit(QLineEdit):
    def __init__(self, parent=None):
        super().__init__(parent)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.clear()  # Revert changes by clearing the text
        else:
            super().keyPressEvent(event)

class CustomTableWidget(QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            for item in self.selectedItems():
                item.setText("")  # Revert changes by setting the text to an empty string
        else:
            super().keyPressEvent(event)
```

### Distribution
Try pyinstaller
- [mac] https://www.pythonguis.com/tutorials/packaging-pyqt5-applications-pyinstaller-macos-dmg/
- [windows] https://www.pythonguis.com/tutorials/packaging-pyqt5-pyside2-applications-windows-pyinstaller/